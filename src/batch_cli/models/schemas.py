from typing import Any, Dict, Literal, Optional

from openai.types.chat.chat_completion import ChatCompletion
from pydantic import BaseModel, Field


class Message(BaseModel):
    role: str
    content: str


class Response(BaseModel):
    status_code: int
    request_id: str = Field(description="ID of the request, generated by the server")
    body: Optional[ChatCompletion] = None


class BatchResponse(BaseModel):
    id: str = Field(description="The ID of the batch request")
    custom_id: str
    response: Optional[Response] = None
    error: Optional[Any] = None


class OpenAIBatch(BaseModel):
    custom_id: str
    method: Literal["POST"] = "POST"
    url: str = "/v1/chat/completions"
    body: Dict[str, Any]


class OutputModel(BaseModel):
    custom_id: str
    type: str
    model: str
    response: str
    input_tokens: int
    output_tokens: int
